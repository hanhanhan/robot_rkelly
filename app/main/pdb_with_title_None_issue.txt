
(Pdb) l
 51                 section = add_line(section)
 52             return section + "<br>"
 53     
 54         def make_title(song_lyrics):
 55             lyrics_words = re.split('\s*<br>\s*|\W', song_lyrics)
 56  ->         title_word = sample(lyrics_words[:50], 1)[0]
 57             import pdb; pdb.set_trace()
 58             if len(title_word) > 3:
 59                 end = lyrics_words.index(title_word) + 1
 60                 start = randint(end - 3, end - 1)
 61                 if start < 0:
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(57)make_title()
-> import pdb; pdb.set_trace()
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(58)make_title()
-> if len(title_word) > 3:
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(69)make_title()
-> import pdb; pdb.set_trace()
(Pdb) l
 64                 title = " ".join(title_list).title()
 65                 print('\nmake_title()', title_word, 'title_word', title_list, 'title_list', title, 'title', type(title))
 66                 import pdb; pdb.set_trace()
 67                 return title
 68             else:
 69  ->             import pdb; pdb.set_trace()
 70                 make_title(song_lyrics)
 71     
 72         for v in range(verses):
 73             song_lyrics = make_section(verse_length, song_lyrics)
 74     
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(70)make_title()
-> make_title(song_lyrics)
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(58)make_title()
-> if len(title_word) > 3:
(Pdb) title_word
'to'
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(69)make_title()
-> import pdb; pdb.set_trace()
(Pdb) l
 64                 title = " ".join(title_list).title()
 65                 print('\nmake_title()', title_word, 'title_word', title_list, 'title_list', title, 'title', type(title))
 66                 import pdb; pdb.set_trace()
 67                 return title
 68             else:
 69  ->             import pdb; pdb.set_trace()
 70                 make_title(song_lyrics)
 71     
 72         for v in range(verses):
 73             song_lyrics = make_section(verse_length, song_lyrics)
 74     
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(70)make_title()
-> make_title(song_lyrics)
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(58)make_title()
-> if len(title_word) > 3:
(Pdb) title_word
'peace'
(Pdb) s
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(59)make_title()
-> end = lyrics_words.index(title_word) + 1
(Pdb) lyrics_words.index(title_word)
15
(Pdb) lyrics_words[15]
'peace'
(Pdb) lyrics_words[15:16]
['peace']
(Pdb) l
 54         def make_title(song_lyrics):
 55             lyrics_words = re.split('\s*<br>\s*|\W', song_lyrics)
 56             title_word = sample(lyrics_words[:50], 1)[0]
 57             import pdb; pdb.set_trace()
 58             if len(title_word) > 3:
 59  ->             end = lyrics_words.index(title_word) + 1
 60                 start = randint(end - 3, end - 1)
 61                 if start < 0:
 62                     start = 0
 63                 title_list = lyrics_words[start:end]
 64                 title = " ".join(title_list).title()
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(60)make_title()
-> start = randint(end - 3, end - 1)
(Pdb) end
16
(Pdb) l
 55             lyrics_words = re.split('\s*<br>\s*|\W', song_lyrics)
 56             title_word = sample(lyrics_words[:50], 1)[0]
 57             import pdb; pdb.set_trace()
 58             if len(title_word) > 3:
 59                 end = lyrics_words.index(title_word) + 1
 60  ->             start = randint(end - 3, end - 1)
 61                 if start < 0:
 62                     start = 0
 63                 title_list = lyrics_words[start:end]
 64                 title = " ".join(title_list).title()
 65                 print('\nmake_title()', title_word, 'title_word', title_list, 'title_list', title, 'title', type(title))
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(61)make_title()
-> if start < 0:
(Pdb) start
15
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(63)make_title()
-> title_list = lyrics_words[start:end]
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(64)make_title()
-> title = " ".join(title_list).title()
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(65)make_title()
-> print('\nmake_title()', title_word, 'title_word', title_list, 'title_list', title, 'title', type(title))
(Pdb) n

make_title() peace title_word ['peace'] title_list Peace title <class 'str'>
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(66)make_title()
-> import pdb; pdb.set_trace()
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(67)make_title()
-> return title
(Pdb) title
'Peace'
(Pdb) type(title)
<class 'str'>
(Pdb) n
--Return--
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(67)make_title()->'Peace'
-> return title
(Pdb) l
 62                     start = 0
 63                 title_list = lyrics_words[start:end]
 64                 title = " ".join(title_list).title()
 65                 print('\nmake_title()', title_word, 'title_word', title_list, 'title_list', title, 'title', type(title))
 66                 import pdb; pdb.set_trace()
 67  ->             return title
 68             else:
 69                 import pdb; pdb.set_trace()
 70                 make_title(song_lyrics)
 71     
 72         for v in range(verses):
(Pdb) n
--Return--
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(70)make_title()->None
-> make_title(song_lyrics)
(Pdb) l
 65                 print('\nmake_title()', title_word, 'title_word', title_list, 'title_list', title, 'title', type(title))
 66                 import pdb; pdb.set_trace()
 67                 return title
 68             else:
 69                 import pdb; pdb.set_trace()
 70  ->             make_title(song_lyrics)
 71     
 72         for v in range(verses):
 73             song_lyrics = make_section(verse_length, song_lyrics)
 74     
 75             if not chorus or not repeat_chorus:
(Pdb) n
--Return--
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(70)make_title()->None
-> make_title(song_lyrics)
(Pdb) l
 65                 print('\nmake_title()', title_word, 'title_word', title_list, 'title_list', title, 'title', type(title))
 66                 import pdb; pdb.set_trace()
 67                 return title
 68             else:
 69                 import pdb; pdb.set_trace()
 70  ->             make_title(song_lyrics)
 71     
 72         for v in range(verses):
 73             song_lyrics = make_section(verse_length, song_lyrics)
 74     
 75             if not chorus or not repeat_chorus:
(Pdb) n
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(82)lyrics()
-> print(title, 'Title', type(title))
(Pdb) n
None Title <class 'NoneType'>
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(83)lyrics()
-> import pdb; pdb.set_trace()
(Pdb) title
(Pdb) l
 78             song_lyrics = song_lyrics + chorus
 79     
 80         import pdb; pdb.set_trace()
 81         title = make_title(song_lyrics)
 82         print(title, 'Title', type(title))
 83  ->     import pdb; pdb.set_trace()
 84         lyrics_db_item = SongLyrics(title=title, song_lyrics=song_lyrics)
 85     
 86         db.session.add(lyrics_db_item)
 87         db.session.commit()
 88     
(Pdb) up
> //anaconda/envs/flak/lib/python3.5/site-packages/flask/app.py(1598)dispatch_request()
-> return self.view_functions[rule.endpoint](**req.view_args)
(Pdb) down
> /Users/hannah/Documents/Learning/flask_projects/robot_kelly/app/main/views.py(83)lyrics()
-> import pdb; pdb.set_trace()
(Pdb) l
 78             song_lyrics = song_lyrics + chorus
 79     
 80         import pdb; pdb.set_trace()
 81         title = make_title(song_lyrics)
 82         print(title, 'Title', type(title))
 83  ->     import pdb; pdb.set_trace()
 84         lyrics_db_item = SongLyrics(title=title, song_lyrics=song_lyrics)
 85     
 86         db.session.add(lyrics_db_item)
 87         db.session.commit()
 88     
(Pdb) 
